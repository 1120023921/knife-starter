plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java-library'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'

    ext {
        set('springCloudVersion', "2020.0.3")
    }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-autoconfigure'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    processResources {
        from('src/main/java') {
            include '**/*'
        }
//        from('src/main/resources') {
//            include '**/*'
//        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jar {
        enabled = true
        archiveClassifier = ''
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                artifact sourcesJar
            }
        }
        repositories {
            maven {
                allowInsecureProtocol = true
                def releasesRepoUrl = 'http://nexus.cintsoft.com/repository/cintsoft-snapshots/'
                def snapshotsRepoUrl = 'http://nexus.cintsoft.com/repository/cintsoft-releases/'
                url = snapshotsRepoUrl
                credentials {
                    username = 'admin'
                    password = '!Cint@2019'
                }
            }
        }
    }
}